import 'package:flutter/material.dart';
import 'dart:sync';

void main() {
  runApp(new MyApp());
}
class MyApp extends StatelessWidget {

  @override
  Widget build(BuildContext context) {
    return new MaterialApp(
      title: 'Generated App',
      theme: new ThemeData(
        primarySwatch: Colors.blue,
        primaryColor: const Color(0xFF2196f3),
        accentColor: const Color(0xFF2196f3),
        canvasColor: const Color(0xFFfafafa),
      ),
      home: new MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key}) : super(key: key);
  @override
  _MyHomePageState createState() => new _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
    @override
    Widget build(BuildContext context) {
      return new Scaffold(
        appBar: new AppBar(
          title: new Text('FlexMetro'),
          bottom:
            new TabBar(tabs: <Widget>[new Text("text"), new Text("text 2")],
            ),
    
          ),
        body:
          new Row(
            mainAxisAlignment: MainAxisAlignment.start,
            mainAxisSize: MainAxisSize.max,
            crossAxisAlignment: CrossAxisAlignment.center,
          ),
    
      );
    }

class MetroTimerWidget extends StatefulWidget {
  @override
  _MetroTimerWidgetState createState() => _MetroTimerWidgetState();
}
class _MetroTimerWidgetState extends State<MetroTickWidget> {
  Timer? _tmMainBeat;   // 4:4 1...
  Timer? _tmSubBeat;    // 4:4 ..3.
  Timer? _tmOffBeat;    // 4:4 .2.4

  void startMetroTimer({int nom=4, int denom=4, int tempoStart=72, int tempoEnd=72})
}

class MetroTickWidget extends StatelessWidget {
  final bool ticks;
  final double tickDuration;
  final double diam;

  // internal variables
  final double tickDurationLeft;
  final Color colorNotTicking;
  final Color colorTicking;

  const MetroTickWidget({Key key, this.tickDuration, this.diam}) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(size),
      child: SizedBox(
        height: diam,
        width: diam,
        child: Stack(          
          children: [
          Container(
            color: colorNotTicking,
          ),
          Align(
            alignment: Alignment.bottomCenter,
            child: Container(
              height: size * progress,
              color: colorTicking,
            ),
          )
        ]),
      ),
    );
  }
}
}